from __future__ import annotations

from typing import Iterable, Literal, Tuple

# binding: (port, ipv6, type, stack)
Binding = Tuple[int, str, Literal["http", "socks5"], Literal["ipv4", "ipv6"]]


def render_3proxy_cfg(
    inbound_ipv4: str,
    bindings: Iterable[Binding],
    bind_egress: bool,
) -> str:
    lines: list[str] = []
    lines.append("# auto-generated by weaver_manager")
    # НИКАКОГО 'daemon' — контейнер должен держать PID 1 занятым
    lines.append("pidfile /run/3proxy/3proxy.pid")
    lines.append("nserver 1.1.1.1")
    lines.append("nserver 2606:4700:4700::1111")
    lines.append("nscache 65536")
    lines.append("")
    lines.append("setgid 1337")
    lines.append("setuid 1337")
    lines.append('monitor "/run/3proxy/3proxy.ver"')
    lines.append("log /run/3proxy/3proxy.log D")
    lines.append("rotate 10")
    lines.append("flush")
    lines.append("")

    for port, ip, ptype, stack in bindings:
        cmd = "proxy" if ptype == "http" else "socks"
        listen = f"-6 -p{port} -i:: -a" if stack == "ipv6" else f"-p{port} -i{inbound_ipv4} -a"
        if bind_egress and ip:
            listen = f"{listen} -e{ip}"
        lines.append(f"{cmd} {listen}")

    lines.append("")
    return "\n".join(lines)

